# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
{{- if .Values.orggatekeeper.enabled }}
{{- $keycloak_client_id := "integration_orggatekeeper" }}
# TODO: see https://git.magenta.dk/rammearkitektur/os2mo-helm-chart/-/merge_requests/142#note_140651
{{- if not .Values.amqp.enabled }}
  {{- fail "Must have AMQP enabled if orggatekeeper is enabled" }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orggatekeeper
  labels:
    app: orggatekeeper
  {{- with .Values.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orggatekeeper
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: orggatekeeper
    spec:
      containers:
        - name: orggatekeeper
          image: "{{ .Values.orggatekeeper.image.registry }}/{{ .Values.orggatekeeper.image.repository }}:{{ .Values.orggatekeeper.image.tag }}"
          imagePullPolicy: {{ .Values.orggatekeeper.image.pullPolicy }}
          env:
            - name: CLIENT_ID
              value: "{{ $keycloak_client_id }}"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: orggatekeeper-client-secret
                  key: client_secret

            - name: AMQP__URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.amqp.url_secret }}
                  key: url

            - name: ENABLE_HIDE_LOGIC
              value: "true"
          envFrom:
            - configMapRef:
                name: orggatekeeper-config
          ports:
            - containerPort: 8000
          resources:
            {{- toYaml .Values.orggatekeeper.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8000
            periodSeconds: {{ .Values.orggatekeeper.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.orggatekeeper.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.orggatekeeper.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8000
            periodSeconds: {{ .Values.orggatekeeper.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.orggatekeeper.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.orggatekeeper.probes.readiness.failureThreshold }}
          startupProbe:
            httpGet:
              path: /health/ready
              port: 8000
            failureThreshold: {{ .Values.orggatekeeper.probes.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.orggatekeeper.probes.startupProbe.periodSeconds }}
      initContainers:
        {{ include "os2mo.wait-for-keycloak" . | nindent 8 }}
        - name: create-client-secret
          image: "{{ .Values.keycloak.integrationbuilder.image.registry }}/{{ .Values.keycloak.integrationbuilder.image.repository }}:{{ .Values.keycloak.integrationbuilder.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.integrationbuilder.image.pullPolicy }}
          env:
            {{ include "os2mo.keycloak_terraform_db_connection" .  | nindent 12 }}
            - name: POSTGRES_SCHEMA_NAME
              value: terraform_remote_state_orggatekeeper

            # Keycloak REST connection
            - name: TF_VAR_admin_password
              valueFrom:
                secretKeyRef:
                  name: {{ include "os2mo.keycloak_admin_secret" . }}
                  key: admin_password

            # Configuration of the client
            - name: TF_VAR_client_name
              value: "{{ $keycloak_client_id }}"
            - name: TF_VAR_client_roles
              value: '["admin"]'
            - name: TF_VAR_client_secret
              valueFrom:
                secretKeyRef:
                  name: orggatekeeper-client-secret
                  key: client_secret
        {{ include "os2mo.wait-for-mo" . | nindent 8 }}
        - name: os2mo-init
          image: "{{ .Values.os2mo.init.image.registry }}/{{ .Values.os2mo.init.image.repository }}:{{ .Values.os2mo.init.image.tag }}"
          imagePullPolicy: {{ .Values.os2mo.init.image.pullPolicy }}
          env:
            - name: AUTH_SERVER
              value: "http://keycloak-service:8080/auth"
            - name: MO_URL
              value: "http://mo-service:5000"
            - name: CLIENT_ID
              value: "{{ $keycloak_client_id }}"
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: orggatekeeper-client-secret
                  key: client_secret
            - name: LORA_URL
              value: "http://mo-service:5000/lora"
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
          volumeMounts:
           - name: orggatekeeper-init-config-volume
             mountPath: /config
             readOnly: true
      volumes:
        - name: orggatekeeper-init-config-volume
          configMap:
            name: orggatekeeper-init-config
            items:
              - key: config
                path: config.yml
{{- end }}
