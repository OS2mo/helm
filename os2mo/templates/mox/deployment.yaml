# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mox-deployment
  labels:
    app: mox
  {{- with .Values.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.lora.replicaCount }}
  selector:
    matchLabels:
      app: mox
  strategy:
    type: {{ .Values.lora.strategy }}
  template:
    metadata:
      labels:
        app: mox
    spec:
      containers:
        - name: mox
          {{- if ne .Values.lora.image.tag "latest" }}
            {{- if and (.Values.lora.probes.enabled) (semverCompare "<3.3.0" .Values.lora.image.tag) }}
              {{- fail "LoRa version must be at least 3.3.0 when probes are enabled" }}
            {{- end }}
          {{- end }}
          image: "{{ .Values.lora.image.registry }}/{{ .Values.lora.image.repository }}:{{ .Values.lora.image.tag }}"
          imagePullPolicy: {{ .Values.lora.image.pullPolicy }}
          env:
            - name: LORA_AUTH
              value: "false"

            - name: PORT
              value: "8080"

            # gunicorn MAX_WORKERS
            - name: MAX_WORKERS
              value: "{{ .Values.lora.gunicorn.max_workers }}"

            - name: DISABLE_ALEMBIC
              value: "true"

            - name: DB_HOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: DB_SSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: DB_NAME
              value: {{ include "os2mo.mox_db_name" . }}
            - name: DB_USER
              value: {{ include "os2mo.mox_db_user" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mox-secret
                  key: db_password
          envFrom:
            - configMapRef:
                name: mox-config
          ports:
            - containerPort: 8080
          resources:
            {{- toYaml .Values.lora.resources | nindent 12 }}
          {{- if .Values.lora.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /kubernetes/live
              port: 8080
            periodSeconds: {{ .Values.lora.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.lora.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.lora.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /kubernetes/ready
              port: 8080
            periodSeconds: {{ .Values.lora.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.lora.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.lora.probes.readiness.failureThreshold }}
          startupProbe:
            httpGet:
              path: /kubernetes/ready
              port: 8080
            failureThreshold: {{ .Values.lora.probes.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.lora.probes.startupProbe.periodSeconds }}
          {{- end }}
      initContainers:
        - name: mox-init
          image: "{{ .Values.lora.init.image.registry }}/{{ .Values.lora.init.image.repository }}:{{ .Values.lora.init.image.tag }}"
          imagePullPolicy: {{ .Values.lora.init.image.pullPolicy }}
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.database.host }}
            - name: POSTGRES_USER
              value: "{{ .Values.database.user }}"
            {{- if .Values.lora.init.make_superuser }}
            - name: MAKE_SUPERUSER
              value: "true"
            {{- end }}
            {{ if ne .Values.database.sslmode "" }}
            - name: POSTGRES_SSL
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                  {{ else }}
                  name: mox-db-secret
                  {{ end }}
                  key: db_password

            - name: DB_NAME
              value: {{ include "os2mo.mox_db_name" . }}
            - name: DB_USER
              value: {{ include "os2mo.mox_db_user" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mox-secret
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}

        {{ if .Values.fixture }}
        - name: fixture-loader
          image: magentaaps/os2mo-fixture-loader:latest
          args: [ {{ .Values.fixture }} ]
          env:
            - name: PGHOST
              value: {{ .Values.database.host }}
                {{ if ne .Values.database.sslmode "" }}
            - name: PGSSLMODE
              value: {{ .Values.database.sslmode }}
                {{ end }}
            - name: PGDATABASE
              value: {{ include "os2mo.mox_db_name" . }}
            - name: PGUSER
              value: {{ .Values.database.user }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                      {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                      {{ else }}
                  name: mox-db-secret
                      {{ end }}
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        {{ end }}

        - name: alembic
          image: "{{ .Values.lora.image.registry }}/{{ .Values.lora.image.repository }}:{{ .Values.lora.image.tag }}"
          imagePullPolicy: {{ .Values.lora.image.pullPolicy }}
          command: ["python3", "-m", "oio_rest", "initdb", "--wait", "30"]
          env:
            - name: DB_HOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: DB_SSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: DB_NAME
              value: {{ include "os2mo.mox_db_name" . }}
            - name: DB_USER
              value: {{ include "os2mo.mox_db_user" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mox-secret
                  key: db_password
          envFrom:
            - configMapRef:
                name: mox-config
          resources:
            {{- toYaml .Values.lora.resources | nindent 12 }}

        {{ include "os2mo.wait-for-keycloak" . | nindent 8 }}

          {{- if ne .Values.keycloak.builder.image.tag "latest" }}
            {{- if (semverCompare "<3.8.0" .Values.keycloak.builder.image.tag) }}
              {{- fail "Realm builder version must be at least 3.8.0" }}
            {{- end }}
          {{- end }}
        - name: keycloak-realm-builder
          image: "{{ .Values.keycloak.builder.image.registry }}/{{ .Values.keycloak.builder.image.repository }}:{{ .Values.keycloak.builder.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.builder.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: keycloak-gen-config
          env:
            {{ include "os2mo.keycloak_terraform_db_connection" .  | nindent 12 }}

            - name: TF_VAR_KEYCLOAK_ADMIN_USERNAME
              value: "admin"
            - name: TF_VAR_KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "os2mo.keycloak_admin_secret" . }}
                  key: admin_password
            - name: TF_VAR_KEYCLOAK_URL
              value: "http://keycloak-service:8080"
            {{- $is_https := empty .Values.ingress.tls_secret }}
            {{- $protocol := ternary "http" "https" $is_https }}
            - name: TF_VAR_KEYCLOAK_MO_CLIENT_REDIRECT_URI
              value: "[\"{{ $protocol }}://{{ .Values.ingress.hostname }}/*\"]"
            - name: TF_VAR_KEYCLOAK_MO_CLIENT_WEB_ORIGIN
              value: "[\"{{ $protocol }}://{{ .Values.ingress.hostname }}\"]"
            - name: TF_VAR_KEYCLOAK_DIPEX_CLIENT_ENABLED
              value: 'true'
            - name: TF_VAR_KEYCLOAK_DIPEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-dipex-secret
                  key: client_secret
            - name: TF_VAR_KEYCLOAK_IDP_NAME_ID_POLICY_FORMAT
              value: "Unspecified"
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
      restartPolicy: Always
